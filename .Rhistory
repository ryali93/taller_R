l8_b4
distritos <- st_read("data/distritos.shp")
covid <- st_read("data/covid.shp")
dem <- raster("data/dem.tif")
distritos
st_crs(distritos)
st_crs(covid)
st_crs(distritos)
# Look at the CRS to see if they match
st_crs(paises_crs)
crs(dem)
distritos
covid
dem
library(tmap)
tm_shape(dem) +
tm_raster() +
tm_shape(distritos) +
tm_polygons(alpha = 0.5)
tm_shape(dem) +
tm_raster() +
tm_shape(distritos) +
tm_polygons(alpha = 0.5) +
tm_grid()
tm_shape(dem) +
tm_raster() +
tm_shape(distritos) +
tm_polygons(alpha = 0.5) +
tm_grid() +
tm_layout(main.title = "Titulo",
main.title.position = "center",
main.title.color = "blue",
title.color = "red")
tm_shape(dem) +
tm_raster() +
tm_shape(distritos) +
tm_polygons(alpha = 0.5) +
tm_grid() +
tm_layout(main.title = "Titulo",
main.title.position = "center",
main.title.color = "blue",
title.color = "red",
legend.position = "bottom",
legend.just = "left")
tm_shape(dem) +
tm_raster() +
tm_shape(distritos) +
tm_polygons(alpha = 0.5) +
tm_grid() +
tm_layout(main.title = "Titulo",
main.title.position = "center",
main.title.color = "blue",
title.color = "red",
legend.position = "bottom")
tm_shape(dem) +
tm_raster() +
tm_shape(distritos) +
tm_polygons(alpha = 0.5) +
tm_grid() +
tm_layout(main.title = "Titulo",
main.title.position = "center",
main.title.color = "blue",
title.color = "red",
legend.position = c("left","bottom"))
tm_shape(dem) +
tm_raster() +
tm_shape(distritos) +
tm_polygons(alpha = 0.5) +
tm_grid() +
tm_layout(main.title = "Titulo",
main.title.position = "center",
main.title.color = "blue",
title.color = "red",
legend.position = c("left","bottom"),
legend.bg.color = "white")
tm_shape(dem) +
tm_raster() +
tm_shape(distritos) +
tm_polygons(alpha = 0.5) +
tm_grid() +
tm_layout(main.title = "Titulo",
main.title.position = "center",
main.title.color = "blue",
title.color = "red",
legend.position = c("left","bottom"),
legend.bg.color = "white") +
tm_scale_bar(position=c("rigth", "bottom"))
tm_shape(dem) +
tm_raster() +
tm_shape(distritos) +
tm_polygons(alpha = 0.5) +
tm_grid() +
tm_layout(main.title = "Titulo",
main.title.position = "center",
main.title.color = "blue",
title.color = "red",
legend.position = c("left","bottom"),
legend.bg.color = "white") +
tm_scale_bar(position=c("bottom"))
tm_shape(dem) +
tm_raster() +
tm_shape(distritos) +
tm_polygons(alpha = 0.5) +
tm_grid() +
tm_layout(main.title = "Titulo",
main.title.position = "center",
main.title.color = "blue",
title.color = "red",
legend.position = c("left","bottom"),
legend.bg.color = "white") +
tm_scale_bar(position=c("right", "bottom"))
install.packages("rayshader")
library(rayshader)
dem %>%
sphere_shade() %>%
add_water(detect_water(dem)) %>%
add_shadow(ray_shade(dem)) %>%
add_shadow(ambient_shade(dem)) %>%
plot_3d(dem)
dem
dem <- read_elevation_file(dem)
read_elevation_file <- function(file) {
elev_img <- raster::raster(file)
elev_matrix <- matrix(
raster::extract(elev_img, raster::extent(elev_img), buffer = 1000),
nrow = ncol(elev_img), ncol = nrow(elev_img)
)
elev_matrix
}
dem <- read_elevation_file(dem)
dem
dem %>%
sphere_shade() %>%
add_water(detect_water(dem)) %>%
add_shadow(ray_shade(dem)) %>%
add_shadow(ambient_shade(dem)) %>%
plot_3d(dem)
distritos
distritos[1,]
mask(crop(dem, distritos[1,]), distritos[1,])
dem <- raster("data/dem.tif")
dem_lima <- mask(crop(dem, distritos[1,]), distritos[1,])
dem_lima
plot(dem_lima)
dem <- read_elevation_file(dem_lima)
dem %>%
sphere_shade() %>%
add_water(detect_water(dem)) %>%
add_shadow(ray_shade(dem)) %>%
add_shadow(ambient_shade(dem)) %>%
plot_3d(dem)
warnings()
st_crs(32718)
dem_lima_18s <- projectRaster(dem_lima, crs = st_crs(32718))
dem_lima_18s
projectRaster(dem_lima, crs = st_crs(32718))
dem_lima_18s <- projectRaster(dem_lima, crs = CRS(st_crs(32718)))
dem_lima_18s <- projectRaster(dem_lima, crs = CRS(32718))
st_crs(32718)
dem_lima_18s <- projectRaster(dem_lima, crs = "+proj=utm +zone=18 +datum=WGS84 +units=m +no_defs +ellps=WGS84
+towgs84=0,0,0")
dem_lima_18s
dem <- read_elevation_file(dem_lima)
dem %>%
sphere_shade() %>%
add_water(detect_water(dem)) %>%
add_shadow(ray_shade(dem)) %>%
add_shadow(ambient_shade(dem)) %>%
plot_3d(dem)
dem_lima %>%
sphere_shade() %>%
add_water(detect_water(dem_lima)) %>%
add_shadow(ray_shade(dem_lima)) %>%
add_shadow(ambient_shade(dem_lima)) %>%
plot_3d(dem_lima)
elev_matrix <- matrix(
raster::extract(dem_lima, raster::extent(dem_lima), buffer = 1000),
nrow = ncol(dem_lima), ncol = nrow(dem_lima)
)
ambmat <- ambient_shade(elev_matrix, zscale = 30)
raymat <- ray_shade(elev_matrix, zscale = 30, lambert = TRUE)
watermap <- detect_water(elev_matrix)
# plot 2D
elev_matrix %>%
sphere_shade(texture = "imhof4") %>%
add_water(watermap, color = "imhof4") %>%
add_shadow(raymat, max_darken = 0.5) %>%
add_shadow(ambmat, max_darken = 0.5) %>%
plot_map()
elev_matrix %>%
sphere_shade() %>%
add_water(detect_water(elev_matrix)) %>%
add_shadow(ray_shade(elev_matrix)) %>%
add_shadow(ambient_shade(elev_matrix)) %>%
plot_3d(elev_matrix)
dem <- raster("data/dem.tif")
dem_18s <- projectRaster(dem, crs = "+proj=utm +zone=18 +datum=WGS84 +units=m +no_defs +ellps=WGS84
+towgs84=0,0,0")
elev_matrix <- matrix(
raster::extract(dem, raster::extent(dem), buffer = 1000),
nrow = ncol(dem), ncol = nrow(dem)
)
elev_matrix %>%
sphere_shade() %>%
add_water(detect_water(elev_matrix)) %>%
add_shadow(ray_shade(elev_matrix)) %>%
add_shadow(ambient_shade(elev_matrix)) %>%
plot_3d(elev_matrix)
distritos
distritos$DISNOM98
dem <- raster("data/dem.tif")
dem_lima <- mask(crop(dem, distritos[32,]), distritos[32,])
dem_clip <- mask(crop(dem, distritos[32,]), distritos[32,])
plot(dem_clip)
dem_18s <- projectRaster(dem_clip, crs = "+proj=utm +zone=18 +datum=WGS84 +units=m +no_defs +ellps=WGS84
+towgs84=0,0,0")
elev_matrix <- matrix(
raster::extract(dem_clip, raster::extent(dem_clip), buffer = 1000),
nrow = ncol(dem_clip), ncol = nrow(dem_clip)
)
elev_matrix %>%
sphere_shade() %>%
add_water(detect_water(elev_matrix)) %>%
add_shadow(ray_shade(elev_matrix)) %>%
add_shadow(ambient_shade(elev_matrix)) %>%
plot_3d(elev_matrix)
dem_clip <- mask(crop(dem, distritos[32,]), distritos[32,])
dem_18s <- dem_clip
elev_matrix <- matrix(
raster::extract(dem_clip, raster::extent(dem_clip), buffer = 1000),
nrow = ncol(dem_clip), ncol = nrow(dem_clip)
)
elev_matrix %>%
sphere_shade() %>%
add_water(detect_water(elev_matrix)) %>%
add_shadow(ray_shade(elev_matrix)) %>%
add_shadow(ambient_shade(elev_matrix)) %>%
plot_3d(elev_matrix)
install.packages("timeSeries")
AirPassengers
deltat(AirPassengers)
frequency(AirPassengers)
frequency(AirPassengers)
cycle(AirPassengers)
AirPassengers[85:96] = NA
plot(AirPassengers)
## Compute the mean of AirPassengers
mean(AirPassengers, na.rm=TRUE)
## Impute mean values to NA in AirPassengers
AirPassengers[85:96] <- mean(AirPassengers, na.rm = TRUE)
## Generate another plot of AirPassengers
plot(AirPassengers)
## Add the complete AirPassengers data to your plot
rm(AirPassengers)
points(AirPassengers, type = "l", col = 2, lty = 3)
data_vector <- c(10, 6, 11, 8, 10, 3, 6, 9)
time_series <- ts(data_vector)
plot(time_series)
time_series <- ts(data_vector, start = 2001, frequency = 1)
plot(time_series)
is.ts(data_vector)
is.ts(time_series)
eu_stocks <- EuStockMarkets
## Check whether eu_stocks is a ts object
is.ts(eu_stocks)
## View the start, end, and frequency of eu_stocks
start(eu_stocks)
end(eu_stocks)
frequency(eu_stocks)
eu_stocks
Nile
print(Nile)
## Lista del numero de observaciones en el dataset Nile
length(Nile)
## Display the first 10 elements of the Nile dataset
head(Nile, 10)
## Display the last 12 elements of the Nile dataset
tail(Nile, 12)
# PLOT BASICO
## Plot the Nile data
plot(Nile)
## Plot the Nile data with xlab and ylab arguments
plot(Nile, xlab = "Year", ylab = "River Volume (1e9 m^{3})")
## Plot the Nile data with xlab, ylab, main, and type arguments
plot(Nile, xlab = "Year", ylab = "River Volume (1e9 m^{3})", main="Annual River Nile Volume at Aswan, 1871-1970", type="b")
AirPassengers
# ANALIZANDO EL OBJETO TS
## Plot AirPassengers
plot(AirPassengers)
# ANALIZANDO EL OBJETO TS
## Plot AirPassengers
plot(AirPassengers)
## View the start and end dates of AirPassengers
start(AirPassengers)
end(AirPassengers)
## Use time(), deltat(), frequency(), and cycle() with AirPassengers
time(AirPassengers)
deltat(AirPassengers)
frequency(AirPassengers)
cycle(AirPassengers)
AirPassengers
# LLENANDO VALORES VACIOS
AirPassengers[85:96] = NA
AirPassengers
## Plot the AirPassengers data
plot(AirPassengers)
AirPassengers[85:96] <- mean(AirPassengers, na.rm = TRUE)
## Generate another plot of AirPassengers
plot(AirPassengers)
## Add the complete AirPassengers data to your plot
rm(AirPassengers)
points(AirPassengers, type = "l", col = 2, lty = 3)
# CREANDO OBJETOS TS
data_vector <- c(10, 6, 11, 8, 10, 3, 6, 9)
time_series <- ts(data_vector)
plot(time_series)
time_series
# Load xts
library(dplyr)
# Load xts
library(dplyr)
library(xts)
library(xts)
rnorm(5)
# Crear el objeto data usando 5 datos aleatorios
data <- rnorm(5)
seq(1,5)
seq(1,5, 2)
seq(as.Date("01-01-2020"), as.Date("29-02-2020"))
seq(as.Date("01-01-2020"), as.Date("29-02-2020"), by = "day")
seq(as.Date("01-01-2020", format="%d-%m-%Y"), as.Date("29-02-2020", format="%d-%m-%Y")), by = "day")
seq(as.Date("01-01-2020", format="%d-%m-%Y"), as.Date("29-02-2020", format="%d-%m-%Y"), by = "day")
fehchas <- seq(as.Date("01-01-2020", format="%d-%m-%Y"), as.Date("29-02-2020", format="%d-%m-%Y"), by = "day")
fechas <- seq(as.Date("01-01-2020", format="%d-%m-%Y"), as.Date("29-02-2020", format="%d-%m-%Y"), by = "day")
fechas
length(fechas)
rnorm(60)
datos <- rnorm(60)
data.frame(fechas, datos)
df <- data.frame(fechas, datos)
df
plot(df)
plot(df, type="l")
# Crear el objeto data usando 5 datos aleatorios
data <- rnorm(5)
# Creando fechas como objetos Date iniciando desde 2016-01-01
dates <- seq(as.Date("2016-01-01"), length = 5, by = "days")
dates
# Usando xts() para crear la variable smith
smith <- xts(x = data, order.by = dates)
smith
bday <- as.POSIXct("1899-05-08")
# Crear el objeto hayek y agregar una columna llamada 'born'
hayek <- xts(x = data, order.by = dates, born = bday)
hayek
hayek
class(hayek)
# Ver la estructura de un objeto xts
str(hayek)
# Extraer la data del nucleo de hayek
coredata(hayek)
hayek_index <- index(hayek)
hayek_index
terremotos <- read.csv("data/earthquakes.csv")
terremotos
head(terremotos)
class(terremotos)
terremotos["DateTime"]
as.POSIXct(terremotos$DateTime)
terremotos_xts <- xts(terremotos$Magnitude, as.POSIXct(terremotos$DateTime))
head(terremotos_xts)
class(terremotos_xts)
plot(terremotos_xts)
# Consultas basadas en tiempo
terremotos_xts["200804",1]
terremotos_xts["200804/06",1]
# Consultas basadas en tiempo
terremotos_xts["20090101/06",1]
# Consultas basadas en tiempo
terremotos_xts["2009",1]
# Consultas basadas en tiempo
plot(terremotos_xts["2009",1])
data <- read.csv('data/serie_caudal.csv')
data
head(data)
data <- data[,-2]
head(data)
data$mes_anno <- as.Date(data$mes_anno, format = "%d/%m/%Y")
class(data)
head(data)
plot(data)
data_caudal <- data[,c(1,2)]
plot(data_caudal)
plot(data_caudal, type="l")
# Transformar data mensual a anual
data_anual = monthly2annual(data, mean, na.rm = TRUE)
library(hydroTSM)
library(xts)
library(ggplot2)
library(hydroTSM)
library(xts)
library(ggplot2)
# Transformar data mensual a anual
data_anual = monthly2annual(data, mean, na.rm = TRUE)
data_anual
head(data)
head(data_anual)
ggplot(data) +
geom_line(aes(x = mes_anno, y = QN301))
df <- as.data.frame(data_anual)
df["anno"] = as.Date(index(data_anual), format="%$Y")
ggplot(df) +
geom_line(aes(x = anno, y = QN301))
df <- as.data.frame(data_anual)
df
df["anno"] = as.Date(index(data_anual), format="%$Y")
ggplot(df) +
geom_line(aes(x = anno, y = QN301))
df
data_anual
# Transformar data mensual a anual
data_anual = monthly2annual(data, mean, na.rm = TRUE)
data_anual
index(data_anual)
as.Date(index(data_anual), format="%$Y")
as.Date(index(data_anual), format="%Y")
df["anno"] = as.Date(index(data_anual), format="%Y")
ggplot(df) +
geom_line(aes(x = anno, y = QN301))
# Load the sf package
library(sf)
# Read in the trees shapefile
paises <- st_read("data/paises.shp")
# View the first few paises
head(paises)
# Load the raster package
library(raster)
# Load the raster package
library(raster)
l8_b4 <- raster("data/landsat8_test_b4.tiff")
l8_b4
# Identify how many layers each object has
nlayers(l8_b4)
# Read in the manhattan Landsat image multi-band raster
st <- stack(
"data/rs/LC08_044034_20170614_B4.tif",
"data/rs/LC08_044034_20170614_B3.tif",
"data/rs/LC08_044034_20170614_B2.tif"
)
st
plot(l8_b4)
class(st)
nlayers(st)
plot(st[[1]])
plot(st[[2]])
plotRGB(st, stretch="lin")
paises
st_crs(paises)
paises <- st_read("data/paises.shp")
# Read in the trees shapefile
paises <- st_read("data/paises.shp")
# Coordinate system
# Determine the CRS for the countries
st_crs(paises)
# Assign the CRS to trees
crs_1 <- "+proj=longlat +ellps=WGS84 +no_defs"
st_crs(paises) <- crs_1
# Coordinate system
# Determine the CRS for the countries
st_crs(paises)
# Determine the CRS for the canopy and paises rasters
crs(paises)
# Transform to a common CRS
# Get the CRS from the l8_b4 object
the_crs <- crs(l8_b4, asText = TRUE)
the_crs
distritos <- st_read("data/distritos.shp")
covid <- st_read("data/covid.shp")
dem <- raster("data/dem.tif")
# Leyendo data de distritos y covid
. <- st_read("data/distritos.shp")
distritos
plot(distritos)
plot(distritos[1,])
plot(distritos[,1])
# Starting in tmap
library(tmap)
tm_shape(dem) +
tm_raster() +
tm_shape(distritos) +
tm_polygons(alpha = 0.5) +
tm_grid() +
tm_layout(main.title = "Titulo",
main.title.position = "center",
main.title.color = "blue",
title.color = "red",
legend.position = c("left","bottom"),
legend.bg.color = "white") +
tm_scale_bar(position=c("right", "bottom"))
piscop <- brick("E:/BASE_DATOS/PISCO/PISCOpm21.nc")
piscop
piscop[[1]]
piscop
piscop[[1]]
plot(piscop[[1]])
plot(distritos[,1], add=T)
pisco_lima <- crop(mask(piscop[[1]], distritos[,1]), distritos[,1])
pisco_lima
plot(pisco_lima)
install.packages("revealjs")
install.packages("emo")
devtools::install_github("hadley/emo")
